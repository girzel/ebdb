
* EBDB
EBDB is a EIEIO port of the BBDB package for Emacs.

In plain English: it is a re-write of the Insidious Big Brother
Database -- Emacs' principal contact management/addressbook program --
using Emacs Lisp's (relatively new) object oriented libraries. The "E"
is vaguely meant to signify "EIEIO".
** Why Did You Do This?
In part to gain practice in writing object-oriented Elisp. The EIEIO
and generic-function libraries are based on Common Lisp's [[https://en.wikipedia.org/wiki/Common_Lisp_Object_System][CLOS system]],
which I think is the [[http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html][cat's pyjamas]].

Also, a database/record-keeping library is an excellent candidate for
the object-oriented programming approach. By making databases, records
and fields into classes (and by making sure that the library code
itself is agnostic as possible about those classes), third-party
developers can easily create new subclasses, and new behavior for
existing classes. By loading external packages, users can augment the
behavior of EBDB without having to use hooks or even customization
options.
** Okay, But What's Cool About It Right Now?
EBDB as it stands provides a few enhancements over BBDB.

1. Multiple databases.
2. Records are identified by UUID. Combined with multiple database
   support, this means that single records can live in more than one
   database. The loading routine checks for duplicate records and does
   its best to automatically merge them. Loading, editing and saving
   records into multiple databases should all work transparently.
3. Organizations are top-level records. To be precise, both "people"
   and "organizations" are subclasses of an abstract parent class
   (other record classes are planned). A person record can have a
   "role" at an organization, and that role can contain an arbitrary
   amount of metadata.
4. Records can have relations to other records.
5. ebdb-i18n.el. This pluggable internationalization framework allows
   developers to write country-specific libraries providing different
   behavior for records and fields depending on nationality. It works
   for all countries except Abkhazia and the Vatican (don't ask).
6. High configurability. EBDB has many customization options (though
   fewer than BBDB had), but users and developers who are familiar
   with generic functions can use them to fundamentally alter the
   behavior and appearance of EBDB with very little code, and fairly
   low risk of breakage. Want to prepend the string "Hi my name is "
   to all the record names in your EBDB buffer? That would be three
   lines of code.
7. A native vCard database class is on its way. A native CardDav
   database class is following at a significant distance.
** What Are the Drawbacks?

Buggy code! Potential data loss! This is still very much beta.

Other than that, loading is a bit slow, and the database persistence
file is significantly larger than it was in BBDB. It's likely that
optimizations can be made to reduce load times, and the size of the
persistence file.
** I Still Want to Try This, Is There a Migration Scheme?
Yes, EBDB will read and migrate from a BBDB v3 data file. Actually,
EBDB preserves the BBDB's old migration routines, so theoretically you
could go from a BBDB v2 file, through BBDB v3, straight to EBDB. I
wouldn't recommend that, though. To migrate:

1. Load the EBDB code while your BBDB customizations are still in
   place -- specifically, the `bbdb-file' option should point to your
   existing BBDB file.
2. Back up that file.
3. Set `ebdb-sources' to a non-existent file name, where you'd like to
   keep the new database.
4. Run `ebdb-load'. You'll be prompted to create the new database, and
   migrate to the new format. It will take a surprisingly long time.
5. If there were any migration failures, you'll get a "BBDB Migration"
   buffer containing the records which couldn't be migrated. Migration
   bug reports are very welcome.

Once you're migrated, load MUA interaction by simply requiring the
relevant libraries, ie ebdb-gnus or ebdb-message. There's no more
`initialize' or `auto-update-init'.

Many of the customization options have changed: there are fewer of
them, for a start. Please see the manual for details.
